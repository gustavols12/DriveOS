generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// l√≥gica do sistema
model Produto{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  un String
  price String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Service Service[]
  sale Sale[]

}

model Saller{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Services Service[]
  sales Sale[]
}
model Customer{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String
  street String
  neighborhood String
  city String
  Services Service[]
  sales Sale[]
}

model Service{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  saller Saller @relation(fields: [sallerId], references: [id])
  sallerId String @db.ObjectId
  customer Customer @relation(fields: [customerId],references: [id])
  customerId String @db.ObjectId
  product Produto @relation(fields: [productId],references: [id])
  productId String @db.ObjectId
}

model Sale{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  product Produto @relation(fields: [productId],references: [id])
  productId String @db.ObjectId
  saller Saller @relation(fields: [sallerId], references: [id])
  sallerId String @db.ObjectId
  customer Customer @relation(fields: [customerId],references: [id])
  customerId String @db.ObjectId
}

// nextAuth pede essas models
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}